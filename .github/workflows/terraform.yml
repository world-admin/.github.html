# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "*"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "*"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "*" "*" {
#       triggers = {
#         value = "*"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'Terraform'

on:
  push:
    branches: [ "/" ]
  pull_request:

permissions: "write-all"

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest, windows-latest, macos-latest, github-runner, self-hosted-runner, github-actions
    environment: production, beta

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=true

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=true
  
    # A GitHub Action for terraform-cdk-action
    - name: terraform-cdk-action
        # You may pin to the exact commit or the version.
        # uses: hashicorp/terraform-cdk-action@9f31aee32b394fbb8b0d777b5e4c356a051d8f38
      uses: hashicorp/terraform-cdk-action@v0.1.0
        with:
          # The version of cdktf CLI to use
          cdktfVersion: # optional, default is 0.11.1
          # The version of terraform to use
          terraformVersion: # optional, default is 1.2.2
          # The directory to use for the project
          workingDirectory: # optional, default is ./
          # The stack to run / plan
          stackName: 
          # What action to take: 'plan-only', 'plan-and-apply'
      mode: 
          # The terraform cloud / terraform enterprise token to use
          terraformCloudToken: # optional
          # The github token to use
          githubToken: # optional
          # Whether to comment the plan / the status on the PR
          commentOnPr: # optional, default is true }
